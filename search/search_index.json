{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenAI Agents SDK","text":"<p>The OpenAI Agents SDK enables you to build agentic AI apps in a lightweight, easy-to-use package with very few abstractions. It's a production-ready upgrade of our previous experimentation for agents, Swarm. The Agents SDK has a very small set of primitives:</p> <ul> <li>Agents, which are LLMs equipped with instructions and tools</li> <li>Handoffs, which allow agents to delegate to other agents for specific tasks</li> <li>Guardrails, which enable the inputs to agents to be validated</li> </ul> <p>In combination with JavaScript/TypeScript, these primitives are powerful enough to express complex relationships between tools and agents, and allow you to build real-world applications without a steep learning curve. In addition, the SDK comes with built-in tracing that lets you visualize and debug your agentic flows, as well as evaluate them and even fine-tune models for your application.</p>"},{"location":"#why-use-the-agents-sdk","title":"Why use the Agents SDK","text":"<p>The SDK has two driving design principles:</p> <ol> <li>Enough features to be worth using, but few enough primitives to make it quick to learn.</li> <li>Works great out of the box, but you can customize exactly what happens.</li> </ol> <p>Here are the main features of the SDK:</p> <ul> <li>Agent loop: Built-in agent loop that handles calling tools, sending results to the LLM, and looping until the LLM is done.</li> <li>TypeScript-first: Use built-in language features to orchestrate and chain agents, rather than needing to learn new abstractions.</li> <li>Handoffs: A powerful feature to coordinate and delegate between multiple agents.</li> <li>Guardrails: Run input validations and checks in parallel to your agents, breaking early if the checks fail.</li> <li>Function tools: Turn any JavaScript/TypeScript function into a tool, with automatic schema generation and validation.</li> <li>Tracing: Built-in tracing that lets you visualize, debug and monitor your workflows, as well as use the OpenAI suite of evaluation, fine-tuning and distillation tools.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>npm install openai-agents-js\n</code></pre>"},{"location":"#hello-world-example","title":"Hello world example","text":"<pre><code>import { Agent, Runner } from 'openai-agents-js';\n\nasync function main() {\n  const agent = new Agent({\n    name: 'Assistant',\n    instructions: 'You only respond in haikus.',\n  });\n\n  const result = await Runner.run(agent, 'Tell me about recursion in programming.');\n  console.log(result.finalOutput);\n  // Function calls itself,\n  // Looping in smaller pieces,\n  // Endless by design.\n}\n\nmain();\n</code></pre> <p>(If running this, ensure you set the <code>OPENAI_API_KEY</code> environment variable)</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#create-a-project","title":"Create a project","text":"<p>You'll only need to do this once.</p> <pre><code>mkdir my_project\ncd my_project\nnpm init -y\n</code></pre>"},{"location":"quickstart/#install-the-agents-sdk","title":"Install the Agents SDK","text":"<pre><code>npm install openai-agents-js\n</code></pre>"},{"location":"quickstart/#set-an-openai-api-key","title":"Set an OpenAI API key","text":"<p>If you don't have one, follow these instructions to create an OpenAI API key.</p> <pre><code>export OPENAI_API_KEY=sk-...\n</code></pre>"},{"location":"quickstart/#create-your-first-agent","title":"Create your first agent","text":"<p>Agents are defined with instructions, a name, and optional config (such as <code>modelConfig</code>)</p> <pre><code>import { Agent } from 'openai-agents-js';\n\nconst agent = new Agent({\n  name: \"Math Tutor\",\n  instructions: \"You provide help with math problems. Explain your reasoning at each step and include examples\",\n});\n</code></pre>"},{"location":"quickstart/#add-a-few-more-agents","title":"Add a few more agents","text":"<p>Additional agents can be defined in the same way. <code>handoff_description</code> provides additional context for determining handoff routing</p> <pre><code>import { Agent } from 'openai-agents-js';\n\nconst historyTutorAgent = new Agent({\n  name: \"History Tutor\",\n  handoff_description: \"Specialist agent for historical questions\",\n  instructions: \"You provide assistance with historical queries. Explain important events and context clearly.\",\n});\n\nconst mathTutorAgent = new Agent({\n  name: \"Math Tutor\",\n  handoff_description: \"Specialist agent for math questions\",\n  instructions: \"You provide help with math problems. Explain your reasoning at each step and include examples\",\n});\n</code></pre>"},{"location":"quickstart/#define-your-handoffs","title":"Define your handoffs","text":"<p>On each agent, you can define an inventory of outgoing handoff options that the agent can choose from to decide how to make progress on their task.</p> <pre><code>const triageAgent = new Agent({\n  name: \"Triage Agent\",\n  instructions: \"You determine which agent to use based on the user's homework question\",\n  handoffs: [historyTutorAgent, mathTutorAgent]\n});\n</code></pre>"},{"location":"quickstart/#run-the-agent-orchestration","title":"Run the agent orchestration","text":"<p>Let's check that the workflow runs and the triage agent correctly routes between the two specialist agents.</p> <pre><code>import { Runner } from 'openai-agents-js';\n\nasync function main() {\n  const result = await Runner.run(triageAgent, \"What is the capital of France?\");\n  console.log(result.finalOutput);\n}\n\nmain();\n</code></pre>"},{"location":"quickstart/#add-a-guardrail","title":"Add a guardrail","text":"<p>You can define custom guardrails to run on the input or output.</p> <pre><code>import { z } from 'zod';\nimport { \n  Agent, \n  Runner, \n  GuardrailFunctionOutput, \n  AgentOutputSchema,\n  RunContextWrapper,\n  TResponseInputItem \n} from 'openai-agents-js';\n\nconst HomeworkOutputSchema = z.object({\n  isHomework: z.boolean(),\n  reasoning: z.string(),\n});\n\nconst guardrailAgent = new Agent({\n  name: \"Guardrail check\",\n  instructions: \"Check if the user is asking about homework.\",\n  output_type: new AgentOutputSchema(HomeworkOutputSchema),\n});\n\nasync function homeworkGuardrail(\n  ctx: RunContextWrapper&lt;any&gt;, \n  agent: Agent&lt;any&gt;, \n  input: string | TResponseInputItem[]\n) {\n  const result = await Runner.run(guardrailAgent, input, { context: ctx.context });\n  const finalOutput = result.finalOutputAs(HomeworkOutputSchema);\n  console.log(finalOutput);\n  return new GuardrailFunctionOutput({\n    output_info: finalOutput,\n    tripwire_triggered: !finalOutput.isHomework,\n  });\n}\n</code></pre>"},{"location":"quickstart/#put-it-all-together","title":"Put it all together","text":"<p>Let's put it all together and run the entire workflow, using handoffs and the input guardrail.</p> <pre><code>import { z } from 'zod';\nimport { \n  Agent, \n  Runner, \n  GuardrailFunctionOutput, \n  AgentOutputSchema,\n  InputGuardrail,\n  RunContextWrapper,\n  TResponseInputItem \n} from 'openai-agents-js';\n\nconst HomeworkOutputSchema = z.object({\n  isHomework: z.boolean(),\n  reasoning: z.string(),\n});\n\nconst guardrailAgent = new Agent({\n  name: \"Guardrail check\",\n  instructions: \"Check if the user is asking about homework.\",\n  output_type: new AgentOutputSchema(HomeworkOutputSchema),\n});\n\nconst mathTutorAgent = new Agent({\n  name: \"Math Tutor\",\n  handoff_description: \"Specialist agent for math questions\",\n  instructions: \"You provide help with math problems. Explain your reasoning at each step and include examples\",\n});\n\nconst historyTutorAgent = new Agent({\n  name: \"History Tutor\",\n  handoff_description: \"Specialist agent for historical questions\",\n  instructions: \"You provide assistance with historical queries. Explain important events and context clearly.\",\n});\n\nasync function homeworkGuardrail(\n  ctx: RunContextWrapper&lt;any&gt;, \n  agent: Agent&lt;any&gt;, \n  input: string | TResponseInputItem[]\n) {\n  const result = await Runner.run(guardrailAgent, input, { context: ctx.context });\n  const finalOutput = result.finalOutputAs(HomeworkOutputSchema);\n  console.log(finalOutput);\n  return new GuardrailFunctionOutput({\n    output_info: finalOutput,\n    tripwire_triggered: !finalOutput.isHomework,\n  });\n}\n\nconst triageAgent = new Agent({\n  name: \"Triage Agent\",\n  instructions: \"You determine which agent to use based on the user's homework question\",\n  handoffs: [historyTutorAgent, mathTutorAgent],\n  input_guardrails: [new InputGuardrail(homeworkGuardrail)],\n});\n\nasync function main() {\n  const result1 = await Runner.run(triageAgent, \"who was the first president of the united states?\");\n  console.log(result1.finalOutput);\n\n  const result2 = await Runner.run(triageAgent, \"what is life\");\n  console.log(result2.finalOutput);\n}\n\nmain();\n</code></pre>"},{"location":"quickstart/#view-your-traces","title":"View your traces","text":"<p>To review what happened during your agent run, navigate to the Trace viewer in the OpenAI Dashboard to view traces of your agent runs.</p>"},{"location":"quickstart/#next-steps","title":"Next steps","text":"<p>Learn how to build more complex agentic flows:</p> <ul> <li>Learn about how to configure Agents.</li> <li>Learn about running agents.</li> <li>Learn about tools, guardrails and models. </li> </ul>"}]}